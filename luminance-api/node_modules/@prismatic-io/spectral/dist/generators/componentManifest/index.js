"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentManifest = void 0;
const path_1 = __importDefault(require("path"));
const createActions_1 = require("./createActions");
const createConnections_1 = require("./createConnections");
const createDataSources_1 = require("./createDataSources");
const createStaticFiles_1 = require("./createStaticFiles");
const createTriggers_1 = require("./createTriggers");
const removeComponentManifest_1 = require("./removeComponentManifest");
const getComponentSignatureWithPrism_1 = require("../utils/getComponentSignatureWithPrism");
const createComponentManifest = (_a) => __awaiter(void 0, [_a], void 0, function* ({ component, dryRun, skipSignatureVerify, packageName, dependencies, verbose, sourceDir, destinationDir, registry, }) {
    const signature = yield (0, getComponentSignatureWithPrism_1.getComponentSignatureWithPrism)({
        skipSignatureVerify,
    });
    if (verbose) {
        console.info(`Creating a component manifest for ${component.display.label}...`);
        console.log("");
    }
    (0, removeComponentManifest_1.removeComponentManifest)({
        destinationDir,
        verbose,
    });
    yield (0, createStaticFiles_1.createStaticFiles)({
        component,
        dryRun,
        packageName,
        signature,
        dependencies,
        verbose,
        sourceDir,
        destinationDir,
        registry,
    });
    const srcDir = path_1.default.join(destinationDir, "src");
    yield (0, createActions_1.createActions)({
        component,
        dryRun,
        verbose,
        sourceDir,
        destinationDir: srcDir,
    });
    yield (0, createTriggers_1.createTriggers)({
        component,
        dryRun,
        verbose,
        sourceDir,
        destinationDir: srcDir,
    });
    yield (0, createConnections_1.createConnections)({
        component,
        dryRun,
        verbose,
        sourceDir,
        destinationDir: srcDir,
    });
    yield (0, createDataSources_1.createDataSources)({
        component,
        dryRun,
        verbose,
        sourceDir,
        destinationDir: srcDir,
    });
    console.info(`Component manifest created successfully for ${component.display.label} in ${destinationDir}!`);
});
exports.createComponentManifest = createComponentManifest;
