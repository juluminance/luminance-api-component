"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTemplate = void 0;
const ejs_1 = require("ejs");
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const prettier_1 = require("prettier");
const createTemplate = (_a) => __awaiter(void 0, [_a], void 0, function* ({ source, destination = source.replace(/\.ejs$/, ""), data = {}, dryRun, verbose, }) {
    if (!source) {
        throw new Error("Source is required");
    }
    try {
        if (path_1.default.extname(source) === ".ejs") {
            const render = yield (0, ejs_1.renderFile)(source, data);
            const formattedRender = [".ts", ".js"].includes(path_1.default.extname(destination))
                ? yield (0, prettier_1.format)(render, {
                    parser: "typescript",
                })
                : render;
            if (dryRun) {
                console.info("");
                console.info("");
                console.info(`Rendering ${source} to ${destination}`);
                console.info("---------------------------- Start ----------------------------");
                console.info(formattedRender);
                console.info("---------------------------- End ----------------------------");
                console.info("");
                return;
            }
            if (verbose) {
                console.info(`Rendering ${source} to ${destination}`);
            }
            yield (0, fs_extra_1.outputFile)(destination, formattedRender, { encoding: "utf-8" });
        }
        else {
            if (dryRun) {
                console.info("");
                console.info(`Copying ${source} to ${destination}`);
                return;
            }
            if (verbose) {
                console.info(`Copying ${source} to ${destination}`);
            }
            yield (0, fs_extra_1.mkdirp)(path_1.default.dirname(destination));
            yield (0, fs_extra_1.copyFile)(source, destination);
        }
    }
    catch (err) {
        console.error(err);
        throw err;
    }
});
exports.createTemplate = createTemplate;
