import { Method, ResponseType } from "axios";
export declare const url: {
    label: string;
    placeholder: string;
    type: "string";
    required: true;
    comments: string;
    example: string;
    clean: (value: unknown) => string;
};
export declare const data: {
    label: string;
    placeholder: string;
    type: "string";
    required: false;
    comments: string;
    example: string;
};
export declare const timeout: {
    label: string;
    type: "string";
    required: false;
    comments: string;
    example: string;
    clean: (value: unknown) => number;
};
export declare const method: {
    label: string;
    type: "string";
    required: true;
    model: {
        label: Method;
        value: Method;
    }[];
    comments: string;
    clean: (value: unknown) => string;
};
export declare const responseType: {
    label: string;
    placeholder: string;
    type: "string";
    default: string;
    required: true;
    comments: string;
    model: {
        label: ResponseType;
        value: ResponseType;
    }[];
    clean: (value: unknown) => ResponseType;
};
export declare const headers: {
    label: string;
    placeholder: string;
    type: "string";
    collection: "keyvaluelist";
    required: false;
    comments: string;
    example: string;
};
export declare const queryParams: {
    label: string;
    placeholder: string;
    type: "string";
    collection: "keyvaluelist";
    required: false;
    comments: string;
};
export declare const maxRetries: {
    label: string;
    placeholder: string;
    type: "string";
    required: false;
    comments: string;
    default: string;
    clean: (value: unknown) => number;
};
export declare const retryDelayMS: {
    label: string;
    placeholder: string;
    type: "string";
    required: false;
    comments: string;
    default: string;
    clean: (value: unknown) => number;
};
export declare const useExponentialBackoff: {
    label: string;
    type: "boolean";
    default: string;
    required: false;
    comments: string;
    clean: (value: unknown) => boolean;
};
export declare const retryAllErrors: {
    label: string;
    type: "boolean";
    default: string;
    required: false;
    comments: string;
    clean: (value: unknown) => boolean;
};
export declare const formData: {
    label: string;
    placeholder: string;
    type: "string";
    collection: "keyvaluelist";
    required: false;
    comments: string;
    example: string;
};
export declare const fileData: {
    label: string;
    placeholder: string;
    type: "string";
    collection: "keyvaluelist";
    required: false;
    comments: string;
    example: string;
};
export declare const fileDataFileNames: {
    label: string;
    placeholder: string;
    type: "string";
    collection: "keyvaluelist";
    required: false;
    comments: string;
    clean: (values: any) => Record<string, string> | undefined;
};
export declare const debugRequest: {
    label: string;
    type: "boolean";
    required: false;
    comments: string;
    clean: (value: unknown) => boolean;
};
export declare const inputs: {
    url: {
        label: string;
        placeholder: string;
        type: "string";
        required: true;
        comments: string;
        example: string;
        clean: (value: unknown) => string;
    };
    method: {
        label: string;
        type: "string";
        required: true;
        model: {
            label: Method;
            value: Method;
        }[];
        comments: string;
        clean: (value: unknown) => string;
    };
    data: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        example: string;
    };
    formData: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    fileData: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    fileDataFileNames: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        clean: (values: any) => Record<string, string> | undefined;
    };
    queryParams: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
    };
    headers: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    responseType: {
        label: string;
        placeholder: string;
        type: "string";
        default: string;
        required: true;
        comments: string;
        model: {
            label: ResponseType;
            value: ResponseType;
        }[];
        clean: (value: unknown) => ResponseType;
    };
    timeout: {
        label: string;
        type: "string";
        required: false;
        comments: string;
        example: string;
        clean: (value: unknown) => number;
    };
    debugRequest: {
        label: string;
        type: "boolean";
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
    retryDelayMS: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        default: string;
        clean: (value: unknown) => number;
    };
    retryAllErrors: {
        label: string;
        type: "boolean";
        default: string;
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
    maxRetries: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        default: string;
        clean: (value: unknown) => number;
    };
    useExponentialBackoff: {
        label: string;
        type: "boolean";
        default: string;
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
};
