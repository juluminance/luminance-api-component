import type { ConfigVarResultCollection, ErrorHandler, Inputs, PollingTriggerDefinition, PollingTriggerPerformFunction, TriggerPayload } from "../types";
export type PerformFn = (...args: any[]) => Promise<any>;
export type CleanFn = (...args: any[]) => any;
export type InputCleaners = Record<string, CleanFn | undefined>;
interface CreatePerformProps {
    inputCleaners: InputCleaners;
    errorHandler?: ErrorHandler;
}
export declare const cleanParams: (params: Record<string, unknown>, cleaners: InputCleaners) => Record<string, any>;
export declare const createPerform: (performFn: PerformFn, { inputCleaners, errorHandler }: CreatePerformProps) => PerformFn;
export declare const createPollingPerform: (trigger: PollingTriggerDefinition<any, ConfigVarResultCollection, TriggerPayload, boolean, any, any>, { inputCleaners, errorHandler }: CreatePerformProps) => PollingTriggerPerformFunction<Inputs, Inputs>;
export {};
